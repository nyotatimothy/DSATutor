// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  role        String   @default("user") // user | admin | super_admin
  firebaseUid String?   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
  
  // Relations
  courses     Course[]
  progress    Progress[]
  attempts    Attempt[]
  payments    Payment[]
  subscriptions UserSubscription[]
  submissions Submission[]
  notifications Notification[]
  skillAssessments SkillAssessment[]
  courseAccess CourseAccess[]
  learningPaths LearningPath[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  status    String   @default("unread") // read | unread
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String?
  createdBy   String
  isActive    Boolean  @default(true)
  price       Int?     // Price in kobo (null = free)
  isPremium   Boolean  @default(false) // Whether course requires subscription
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  topics      Topic[]
  creator     User     @relation(fields: [createdBy], references: [id])
  courseAccess CourseAccess[]
}

model Topic {
  id          String   @id @default(uuid())
  title       String
  description String?
  order       Int      @default(0)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  progress    Progress[]
  attempts    Attempt[]
  problems    Problem[]
}

model Progress {
  id        String   @id @default(uuid())
  userId    String
  topicId   String
  status    String   @default("not_started") // not_started | in_progress | complete
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  topic     Topic    @relation(fields: [topicId], references: [id])

  @@unique([userId, topicId])
}

model Attempt {
  id          String   @id @default(uuid())
  userId      String
  topicId     String?
  code        String
  result      String   // pass | fail
  timeTaken   Int      // seconds
  score       Int?     // AI-generated score (0-100)
  aiAnalysis  String?  // AI analysis results as JSON string
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  topic       Topic?   @relation(fields: [topicId], references: [id])
}

model SkillAssessment {
  id              String   @id @default(uuid())
  userId          String
  overallLevel    String   // beginner | intermediate | advanced | expert
  strengths       String   // JSON string of strengths array
  weaknesses      String   // JSON string of weaknesses array
  recommendations String   // JSON string of recommendations array
  confidenceScore Int      // 0-100
  assessmentDate  DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  userId      String
  amount      Int      // amount in cents (smallest currency unit)
  currency    String   @default("USD")
  status      String   @default("pending") // pending | success | failed
  reference   String   @unique
  description String?
  paymentType String   @default("subscription") // subscription | course_purchase | one_time
  subscriptionId String? // Reference to subscription if applicable
  courseId    String?  // Reference to course if applicable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

// New Pricing Models
model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String   // e.g., "Basic", "Pro", "Enterprise"
  description String
  price       Int      // Monthly price in cents
  currency    String   @default("USD")
  duration    Int      // Duration in days (30 for monthly, 365 for yearly)
  features    String   // JSON string of features array
  maxCourses  Int?     // Maximum courses user can access (null = unlimited)
  maxAssessments Int?  // Maximum AI assessments per month (null = unlimited)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions UserSubscription[]
}

model UserSubscription {
  id                String   @id @default(uuid())
  userId            String
  planId            String
  status            String   @default("active") // active | expired | cancelled | pending
  startDate         DateTime @default(now())
  endDate           DateTime
  autoRenew         Boolean  @default(true)
  lastBillingDate   DateTime @default(now())
  nextBillingDate   DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
}

model CourseAccess {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  accessType String  @default("subscription") // subscription | purchase | free
  grantedAt DateTime @default(now())
  expiresAt DateTime? // null = permanent access
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Submission {
  id          String   @id @default(uuid())
  userId      String
  problemId   String
  code        String
  language    String
  result      String   // "pass" | "fail"
  error       String?
  durationMs  Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  problem     Problem  @relation(fields: [problemId], references: [id])
}

model Problem {
  id          String   @id @default(uuid())
  title       String
  prompt      String
  difficulty  String   // "easy" | "medium" | "hard"
  topicId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  testCases   TestCase[]
  submissions Submission[]
  topic       Topic    @relation(fields: [topicId], references: [id])
}

model TestCase {
  id         String   @id @default(uuid())
  input      String
  expected   String
  hidden     Boolean  @default(false)
  problemId  String
  problem    Problem  @relation(fields: [problemId], references: [id])
  createdAt  DateTime @default(now())
}

model LearningPath {
  id                      String   @id @default(uuid())
  userId                  String
  currentLevel            String   // beginner | intermediate | advanced
  targetLevel             String   // beginner | intermediate | advanced | expert
  roadmap                 String   // JSON string of roadmap array
  immediateNextSteps      String   // JSON string of next steps array
  longTermGoals           String   // JSON string of goals array
  practiceRecommendations String   // JSON string of recommendations array
  createdAt               DateTime @default(now())
  user                    User     @relation(fields: [userId], references: [id])
}